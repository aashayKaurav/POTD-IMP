// [HARD but EASY]
You are given an m x n integer matrix grid, where you can move from a cell to any adjacent cell in all 4 directions.

Return the number of strictly increasing paths in the grid such that you can start from any cell and end at any cell. Since the answer may be very large, 
return it modulo 109 + 7.

Two paths are considered different if they do not have exactly the same sequence of visited cells.

Example 1:


Input: grid = [[1,1],[3,4]]
Output: 8
Explanation: The strictly increasing paths are:
- Paths with length 1: [1], [1], [3], [4].
- Paths with length 2: [1 -> 3], [1 -> 4], [3 -> 4].
- Paths with length 3: [1 -> 3 -> 4].
The total number of paths is 4 + 3 + 1 = 8.
Example 2:

Input: grid = [[1],[2]]
Output: 3
Explanation: The strictly increasing paths are:
- Paths with length 1: [1], [2].
- Paths with length 2: [1 -> 2].
The total number of paths is 2 + 1 = 3.

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 1000
1 <= m * n <= 105
1 <= grid[i][j] <= 105
//
    ** Similar to 329 Leetcode.
    ** Approach : We can use DFS traversal to traverse in all 4 possibilities from each (i, j) and try to find the number of strictly increasing paths ending at index
    (i, j). Finally we can memoize by using dp.
    
    int m, n;
    long long mod = 1e9 + 7;
    vector<int> drow{0, 0, +1, -1};
    vector<int> dcol{-1, +1, 0, 0};
    int dp[1001][1001];
    int dfs(vector<vector<int>>& grid, int i, int j) {
        int ans = 1;
        if(dp[i][j] != -1)
            return dp[i][j];

        for(int k=0; k<4; k++) {
            int dr = i + drow[k];
            int dc = j + dcol[k];
            if(dr >= 0 && dr < m && dc >= 0 && dc < n 
            && grid[dr][dc] < grid[i][j]) {
                ans = (ans + dfs(grid, dr, dc))%mod;
            }
        }

        return dp[i][j] = ans;
    } 

    int countPaths(vector<vector<int>>& grid) {
        m = grid.size();
        n = grid[0].size();
        int answer = 0;
        memset(dp, -1, sizeof(dp));
        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++) {
                answer = (answer + dfs(grid, i, j))%mod;
            }
        }
        return answer;
    }
    T.C : O(M*N)
    S.C : O(M*N)
