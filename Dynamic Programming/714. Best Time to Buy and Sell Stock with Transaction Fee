//
You are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee.

Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [1,3,2,8,4,9], fee = 2
Output: 8
Explanation: The maximum profit can be achieved by:
- Buying at prices[0] = 1
- Selling at prices[3] = 8
- Buying at prices[4] = 4
- Selling at prices[5] = 9
The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.
Example 2:

Input: prices = [1,3,7,5,10,3], fee = 3
Output: 6
 

Constraints:

1 <= prices.length <= 5 * 104
1 <= prices[i] < 5 * 104
0 <= fee < 5 * 104
//

    int dp[5001][2];
    int solve(vector<int> &prices, int day, int n, bool buy) {
        if(day >= n) {
            return 0;
        }
        if(dp[day][buy] != -1) {
            return dp[day][buy];
        }
        int profit = 0;
        if(buy) {
            int taken = solve(prices, day+1, n, false) - prices[day];

            int notTaken = solve(prices, day+1, n, true);

            profit = max(max(profit, taken), notTaken);
        }
        else{
            int sell = prices[day] + solve(prices, day+2, n, true);

            int notSell = solve(prices, day+1, n, false);

            profit = max(max(profit, sell), notSell);
        }
        return dp[day][buy] = profit;
    }

    int maxProfit(vector<int>& prices) {
        memset(dp, -1, sizeof(dp));
        return solve(prices, 0, prices.size(), true);
    }
    T.C : O(N)
    S.C : O(N)
