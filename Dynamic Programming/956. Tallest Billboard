//
You are installing a billboard and want it to have the largest height. The billboard will have two steel supports, one on each side. 
Each steel support must be an equal height.

You are given a collection of rods that can be welded together. For example, if you have rods of lengths 1, 2, and 3, you can weld them together to make a 
support of length 6.

Return the largest possible height of your billboard installation. If you cannot support the billboard, return 0.

Example 1:

Input: rods = [1,2,3,6]
Output: 6
Explanation: We have two disjoint subsets {1,2,3} and {6}, which have the same sum = 6.
Example 2:

Input: rods = [1,2,3,4,5,6]
Output: 10
Explanation: We have two disjoint subsets {2,3,5} and {4,6}, which have the same sum = 10.
Example 3:

Input: rods = [1,2]
Output: 0
Explanation: The billboard cannot be supported, so we return 0.

Constraints:

1 <= rods.length <= 20
1 <= rods[i] <= 1000
sum(rods[i]) <= 5000
//

    ** Approach : For every peice of rod we have three options --
                  1. To include into rod1
                  2. To include into rod2
                  3. To neither include into rod1 nor rod2
      But to memoize this solution it shows memory overflow as we need int dp[index][rod1][rod2]. Therefore We will store their differences (rod1-rod2) and keep adding their
      sizes but at last we will have sum of both the rods so divide by 2 and return ans.

      int dp[21][10001];
    int solve(vector<int>& rods, int index, int n, int diff) {
        if(index >= n) {
            if(diff == 0) {
                return 0;
            }
            return INT_MIN;
        }
        if(dp[index][diff+5000] != -1) {
            return dp[index][diff+5000];
        }
        int not_including_to_any_rod = solve(rods, index+1, n, diff);
        int including_to_rod1 = rods[index] + solve(rods, index+1, n, diff+rods[index]);
        int including_to_rod2 = rods[index] + solve(rods, index+1, n, diff - rods[index]);

        return dp[index][diff+5000] = max(not_including_to_any_rod, max(including_to_rod1, including_to_rod2));
    }

    int tallestBillboard(vector<int>& rods) {
        memset(dp, -1, sizeof(dp));
        return solve(rods, 0, rods.size(), 0)/2;
    }
    T.C : O(N*M) , where N : indexes and M: atmost differences
    S.C : O(N*M)
