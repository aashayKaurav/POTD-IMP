//
Given two integer arrays arr1 and arr2, return the minimum number of operations (possibly zero) needed to make arr1 strictly increasing.

In one operation, you can choose two indices 0 <= i < arr1.length and 0 <= j < arr2.length and do the assignment arr1[i] = arr2[j].

If there is no way to make arr1 strictly increasing, return -1.

Example 1:

Input: arr1 = [1,5,3,6,7], arr2 = [1,3,2,4]
Output: 1
Explanation: Replace 5 with 2, then arr1 = [1, 2, 3, 6, 7].
Example 2:

Input: arr1 = [1,5,3,6,7], arr2 = [4,3,1]
Output: 2
Explanation: Replace 5 with 3 and then replace 3 with 4. arr1 = [1, 3, 4, 6, 7].
Example 3:

Input: arr1 = [1,5,3,6,7], arr2 = [1,6,3,3]
Output: -1
Explanation: You can't make arr1 strictly increasing.

Constraints:

1 <= arr1.length, arr2.length <= 2000
0 <= arr1[i], arr2[i] <= 10^9
//

    map<pair<int, int>, int> mp;

    int solve(vector<int> &arr1, vector<int> &arr2, int idx, int prev, int n) {
        if(idx >= n) {
            return 0;
        }
        if(mp.find({idx, prev}) != mp.end())  {
            return mp[{idx, prev}];
        }
        int notTaken = 1e9+1;
        if(prev < arr1[idx]) {
            notTaken = solve(arr1, arr2, idx+1, arr1[idx], n);
        }
        int taken = 1e9+1;
        auto it = upper_bound(arr2.begin(), arr2.end(), prev);
        if(it != arr2.end()) {
            int j = it - arr2.begin();
            
            taken = 1 + solve(arr1, arr2, idx+1, arr2[j], n);
        }

        return mp[{idx, prev}] = min(taken, notTaken);

    }

    int makeArrayIncreasing(vector<int>& arr1, vector<int>& arr2) {
        int n = arr1.size();
        int m = arr2.size();
        if(n < 2) {
            return n;
        }
        sort(arr2.begin(), arr2.end());

        int result = solve(arr1, arr2, 0, -1, n);
        if(result == 1e9+1) {
            return -1;
        }
        return result;
    }
    T.C : O(n^2 log n).
    S.C : O(nm)
