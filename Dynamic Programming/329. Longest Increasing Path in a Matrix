//
Given an m x n integers matrix, return the length of the longest increasing path in matrix.

From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary 
(i.e., wrap-around is not allowed).

Example 1:

Input: matrix = [[9,9,4],[6,6,8],[2,1,1]]
Output: 4
Explanation: The longest increasing path is [1, 2, 6, 9].

Example 2:

Input: matrix = [[3,4,5],[3,2,6],[2,2,1]]
Output: 4
Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.
Example 3:

Input: matrix = [[1]]
Output: 1

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 200
0 <= matrix[i][j] <= 231 - 1
//

    ** Approach : We can use DFS traversal to traverse all 4 possibilites of each (i, j). For each (i, j) we need to find longest increasing path. and Finally return 
    our ans. We can also memoize our code.
    
    int m, n;
    vector<int> drow = {+1, -1, 0, 0};
    vector<int> dcol = {0, 0, +1, -1};
    int dp[1001][1001];

    int dfs(vector<vector<int>>& matrix, int i, int j) {

        int ans = 1;
        if(dp[i][j] != -1) {
            return dp[i][j];
        }
        for(int k=0; k<4; k++) {
            int dr = i + drow[k];
            int dc = j + dcol[k];

            if(dr >= 0 && dr < m && dc >= 0 && dc < n &&
            matrix[dr][dc] < matrix[i][j]) {
                ans = max(ans, 1+dfs(matrix, dr, dc));
            }
        }
        return dp[i][j] = ans;
    }

    int longestIncreasingPath(vector<vector<int>>& matrix) {
        m = matrix.size();
        n = matrix[0].size();

        memset(dp, -1, sizeof(dp));

        int ans = INT_MIN;
        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++) {
                ans = max(ans, dfs(matrix, i, j));
            }
        }
        return ans;
    }
    T.C : O(M*N)
    S.C : O(M*N)
