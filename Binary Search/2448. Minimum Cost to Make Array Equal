//
You are given two 0-indexed arrays nums and cost consisting each of n positive integers.

You can do the following operation any number of times:

Increase or decrease any element of the array nums by 1.
The cost of doing one operation on the ith element is cost[i].

Return the minimum total cost such that all the elements of the array nums become equal.

Example 1:

Input: nums = [1,3,5,2], cost = [2,3,1,14]
Output: 8
Explanation: We can make all the elements equal to 2 in the following way:
- Increase the 0th element one time. The cost is 2.
- Decrease the 1st element one time. The cost is 3.
- Decrease the 2nd element three times. The cost is 1 + 1 + 1 = 3.
The total cost is 2 + 3 + 3 = 8.
It can be shown that we cannot make the array equal with a smaller cost.
Example 2:

Input: nums = [2,2,2,2,2], cost = [4,2,8,1,3]
Output: 0
Explanation: All the elements are already equal, so no operations are needed.
//

    ** Brute Approach : For every element we will try to make all other elements equal and keep storeing the cost in a vector. Then finally we will tak the minimum cost
    from that as ans.
    long long minCost(vector<int>& nums, vector<int>& cost) {
        vector<long long> ans;
        double costing=0;
        long long value=0;
        for(int i=0;i<nums.size();i++){
            for(int j=0;j<nums.size();j++){
                value=abs(static_cast<long long>(nums[j]-nums[i]))*cost[j];
                costing+=value;
            }
            ans.push_back(costing);
            costing=0;

        }
        return *min_element(ans.begin(),ans.end());
    }
    T.C : O(N^2)
    S.C : O(N)
-------------------------------------------------------------------------------------------------------------
    ** Optimal Approach : We can observe our search space between (minElement -- maxElement) tehn we will find mid and findCost of making all elements of the nums equal to
    min and also equal to mid+1. Then we will compare both if cost1 > cost2 that means on going right side we won't get optimal ans so right = mid-1. Otherwise we will 
    go to right side.
    typedef long long ll;

    ll findCost(vector<int>& nums, vector<int>& cost, int val) {
        ll ans = 0;
        for(int i=0; i<nums.size(); i++) {
            ans += (ll)abs(nums[i]-val)*cost[i];
        }
        return ans;
    }

    long long minCost(vector<int>& nums, vector<int>& cost) {
        ll answer = INT_MAX;

        int left = *min_element(nums.begin(), nums.end());
        int right = *max_element(nums.begin(), nums.end());

        while(left <= right) {

            int mid = left + ((right-left)>>1);
            
            ll cost1 = findCost(nums, cost, mid);
            ll cost2 = findCost(nums, cost, mid+1);

            answer = min(cost1, cost2);

            if(cost2 > cost1) {
                right = mid-1;
            }
            else{
                left = mid+1;
            }

        }
        return answer;
    }
    T.C : O(N*LogN)
    S.C : O(1)
